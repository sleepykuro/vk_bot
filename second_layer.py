import random 
import sqlite3
import numpy as np
from datetime import datetime, date, time
import json


groups = {
   "course_1": "1",
   "course_2": "2",
   "course_3": "3",
   "course_4": "4",

   "letter_1": "–ø",
   "letter_2": "—Ä",
   "letter_3": "–∫",
   "letter_4": "–∏–±",

   "year_1": "19",
   "year_2": "18",
   "year_3": "17",
   "year_4": "16"

}

def hi_answer_random(hi):
    if hi == 'hi':
        r = random.randint(1,11)
        if r == 1: 
            answer = '–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ ?'
        elif r == 2:
            answer = '–ü—Ä–∏–≤–µ—Ç, —è –ª–∏—á–Ω—ã–π –±–æ—Ç itHub –∫–æ–ª–ª–µ–¥–∂–∞üòâ \n –ù–∞–¥–µ—é—Å—å –º—ã –ø–æ–ª–∞–¥–∏–º ) –æ–±—Ä–∞—â–∞–π—Å—è –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å'
        elif r == 3:
            answer = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —á—Ç–æ –Ω—É–∂–Ω–æ ?'
        elif r == 4:
            answer = '–ü—Ä–∏–≤–µ—Ç, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É "help"'
        elif r == 5:
            answer = '–ü—Ä–∏–≤–µ—Ç, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É "help"'
        elif r == 6:
            answer = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é'
        elif r == 7:
            answer = 'Greetings travellerüòâ'
        elif r == 11:
            answer = 'Greetings travellerüòâ'
        elif r == 8:
            answer = '–ü—Ä–∏–≤–µ—Ç, —è –ª–∏—á–Ω—ã–π –±–æ—Ç itHub –∫–æ–ª–ª–µ–¥–∂–∞üòâ \n –ù–∞–¥–µ—é—Å—å –º—ã –ø–æ–ª–∞–¥–∏–º ) –æ–±—Ä–∞—â–∞–π—Å—è –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å '                   
        elif r == 9:
            answer = '–ü—Ä–∏–≤–µ—Ç, —è –ª–∏—á–Ω—ã–π –±–æ—Ç itHub –∫–æ–ª–ª–µ–¥–∂–∞üòâ \n –ù–∞–¥–µ—é—Å—å –º—ã –ø–æ–ª–∞–¥–∏–º ) –æ–±—Ä–∞—â–∞–π—Å—è –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å '
        elif r == 10:
            answer = '–ü—Ä–∏–≤–µ—Ç, —è –ª–∏—á–Ω—ã–π –±–æ—Ç itHub –∫–æ–ª–ª–µ–¥–∂–∞üòâ \n –ù–∞–¥–µ—é—Å—å –º—ã –ø–æ–ª–∞–¥–∏–º ) –æ–±—Ä–∞—â–∞–π—Å—è –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å '
        else:
            answer = '–ü—Ä–∏–≤–µ—Ç'
        return answer

def hello_check(resp):
    a = ["–ø—Ä–∏–≤–µ—Ç", '–ø—Ä–∏–≤' , '–∑–¥—Ä–∞—Å—Ç–≤—É–π',
    '–∑–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ', 'hi' ,'hello' , 'hey' , 
    '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é' ,'–∑–¥–∞—Ä–æ–≤–∞' , '–∑–¥–∞—Ä–æ–≤–æ' ,
    '–∫—É' , '—Å–∞–ª–∞–º' , '—Å–∞–ª–∞–º—Å–∞–ª–∞–º' ,'ghbdtn','–ø—Ä–∏–≤–µ—Ç–∏–∫']
    if resp in a:
        return '–ø—Ä–∏–≤–µ—Ç'

def hw(resp):
    a = ["–¥–æ–º–∞—à–Ω—è—è—Ä–∞–±–æ—Ç–∞","–¥–æ–º–∞—à–Ω–µ–µ–∑–∞–¥–∞–Ω–∏–µ","–¥–∑","homework","–¥–æ–º–∞—à–∫–∞","hm"]
    if resp in a:
        return 'real'

def registration_check(response):
    reg = ["–∫–∞–∫–∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è","–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
    "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è","–∫–∞–∫—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è","reg","registration"]
    if response in reg:
        return "–∫–∞–∫–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"

def time_for_end(respon):
    times = ['–≤—Ä–µ–º—è', '—Å–∫–æ–ª—å–∫–æ–≤—Ä–µ–º—è', '—á–∞—Å—ã', '–∫–æ—Ç–æ—Ä—ã–π—á–∞—Å',
    '—Å–∫–æ–ª—å–∫–æ–≤—Ä–µ–º–µ–Ω–∏', 'pair', '–ø–∞—Ä—ã', '–≤—Ä–µ–º—è–¥–æ–ø–∞—Ä—ã',
    'time', '–≤—Ä–µ–º—è', '–≤—Ä–µ–º—è', 'time', '—Å–∫–æ–ª—å–∫–æ–¥–æ–ø–∞—Ä—ã', '–∫–æ–≥–¥–∞–ø–∞—Ä–∞', 'classes',
    '–∫–æ–≥–¥–∞–ø–∞—Ä—ã', '–∫–æ–≥–¥–∞–ø–∞—Ä–∞', '–ø–∞—Ä–∞', '—É—Ä–æ–∫', '–∫–æ–≥–¥–∞—É—Ä–æ–∫', '—Å–∫–æ–ª—å–∫–æ–¥–æ—É—Ä–æ–∫–∞',
    '–∫–æ–≥–¥–∞–Ω–∞—á–∞–ª–æ', '–ø–µ—Ä–µ–º–µ–Ω–∞', '–∫–æ–≥–¥–∞–ø–µ—Ä–µ–º–µ–Ω–∞', '–∫–æ–Ω–µ—Ü—É—Ä–æ–∫–∞', '—Å–∫–æ–ª—å–∫–æ–¥–æ–ø–µ—Ä–µ–º–µ–Ω—ã', 'break']
    if respon in times:
        response = '–≤—Ä–µ–º—è'
    return response

def groupa(grupa):
    a = ["1–∞—Ç19","1–∞—Ç219","1–∏–±119","1–∏–±219","1–∫119",
    "1–∫219","1–ø119","1–ø219","1–ø319","1—Ä119","1—Ä219","1—Å–∞119",
    "1—Ñ119","2–∞—Ç118","2–∏–±118","2–∫118","2–∫218","2–ø118","2–ø218","2–ø318",
    "2—Ä118","2—Ä218","1—Å–∞118","3–∞—Ç118","3–∏–±117","3–∫117","3–ø117","3—Ä117",
    "3—Å–∞117","4–ø117"] 
    if grupa in a: 
        return 'real'

def subject_check(response):
    a = ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ä—É—Å—Å–∫–∏–π","—Ä—É—Å—Å–∫–∏–π—è–∑—ã–∫","–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞","–ª–∏—Ç—Ä–∞","—Ñ–∏–∑–∏–∫–∞",
    "–∞—Å–º—Ç—Ä–æ–Ω–æ–º–∏—è","–∞–Ω–≥–ª–∏–π—Å–∫–∏–π","–∞–Ω–≥–ª–∏–π—Å–∫–∏–π—è–∑—ã–∫","–∏–Ω—Å—Ç—Ä–æ–Ω–Ω—ã–π—è–∑—ã–∫","–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
    "–æ–±—â–µ—Å—Ç–≤–æ","–∏–∏","–≤–≤–µ–¥–µ–Ω–∏–µ–≤–∏–∏","–≤–≤–µ–¥–µ–Ω–∏–µ–≤–∏—Å–∫—É—Å—Å–≤–µ–Ω–Ω—ã–π–∏–Ω—Ç–µ–ª–µ–∫—Ç",
    "–ø–∏—Ç–æ–Ω","python","–≤–≤–µ–¥–µ–Ω–∏–µ–≤python","—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è–∫—É–ª—å—Ç—É—Ä–∞","—Ñ–∏–∑—Ä–∞","–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞","–≤–≤–µ–¥–µ–Ω–∏–µ–≤–ø—Ä–æ–≥—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ–Ω–∞python",
    "english","englishlanguage","–∞–Ω–≥–ª","—Ä—É—Å—Å–∫–∞—è–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞","—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ—Å–≤–æ–π—Å—Ç–≤–∞–ø–∫","–ø–∏—Ç–æ–Ω—á–∏–∫","–æ–±—â–∞–≥–∞","–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π–∏–Ω—Ç–µ–ª–µ–∫—Ç",
    "word","powerpoint","teams","–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–Ω–∞–±–∞–ª–∞–ª–∞–π–∫–µ","–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–Ω–∞python","—Ä–æ–¥–Ω–∞—è–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞","–º–∞—Ç–∞–Ω","–≤—ã—à–º–∞—Ç",
    "–≤—ã—Å—à–∞—è–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞","–≤–µ—Ä—Å—Ç–∫–∞","–¥–∏–∑–∞–π–Ω"]#–Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–∞—Ä—ã —É –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø –∏ –∑–∞–ø–∏—Å–∞—Ç—å
    if response in a: 
        return 'real'

def get_button(label, color, payload=""):
    return {
        "action": {
            "type": "text",
            "payload": json.dumps(payload),
            "label": label
            },
            "color": color
    }




class Variables:
    where = '–∫—É—Ä—Å–∫–∞—è'
    
    
    if where == '–∫—É—Ä—Å–∫–∞—è':
        pair_hour = [
            ['9', '11', '13', '15', '16'],
            ['30','10', '30', '10', '50']
        ]
        # break hour 
        break_hour = [
            ['11', '12', '15', '16', '18'],
            ['00', '40', '00', '40', '20']
        ]
    else:
        pair_hour = [
            ['10', '11', '14', '15', '17'],
            ['00','40', '00', '40', '20']
        ]
        # break hour 
        break_hour = [
            ['11', '13', '15', '17', '18'],
            ['30', '10', '30', '10', '50']
        ]
    
    # time now
    hour_now = (datetime.strftime(datetime.now(), "%H"))
    minute_now = (datetime.strftime(datetime.now(), "%M"))
    
    # hour_now = '16'
    # minute_now = '00'

  

class TimeTimeTime(Variables):
    
    def __init__(self):
        
        self.hour = np.dtype(f"timedelta64[{self.hour_now}h]")
        self.minute = np.dtype(f'timedelta64[{self.minute_now}m]')
        print(f'{self.hour}, {self.minute}')
    
    
    def generater_vars(self): 
        
        try:
            self.hour_ = np.array(1, self.hour).astype('timedelta64[m]')
            self.minute_ =  np.array(1, self.minute).astype('timedelta64[m]')
            return self.hour_ + self.minute_
        except SystemError:
            return self.hour_

    
    def translate_time(self):
        
        self.pair_hour_ = [i for e, i in enumerate(self.pair_hour) if e == 0][0]
        self.pair_minute_ = [i for e, i in enumerate(self.pair_hour) if e == 1][0]
        self.break_hour_ = [i for e, i in enumerate(self.break_hour) if e == 0][0]
        self.break_minute_ = [i for e, i in enumerate(self.break_hour) if e == 1][0]
        
        return self.pair_hour_, self.pair_minute_, self.break_hour_, self.break_minute_
    
    
    def restailer(self):
        
        self.pair_hour_time = []
        for index in range(len(self.translate_time()[0])):
            self.pair_hour_time.append(np.dtype(f'timedelta64[{self.translate_time()[0][index]}h]'))
        
        self.pair_minute_time = []
        for index in range(len(self.translate_time()[1])):
            self.pair_minute_time.append(np.dtype(f'timedelta64[{self.translate_time()[1][index]}m]'))
        
        self.break_hour_time = []
        for index in range(len(self.translate_time()[2])):
            self.break_hour_time.append(np.dtype(f'timedelta64[{self.translate_time()[2][index]}h]'))
            
        self.break_minute_time = []
        for index in range(len(self.translate_time()[3])):
            self.break_minute_time.append(np.dtype(f'timedelta64[{self.translate_time()[3][index]}m]'))
    
        return self.pair_hour_time, \
        self.pair_minute_time, \
        self.break_hour_time, \
        self.break_minute_time
    
    def recycler(self):
        
        self.pair_hour_time_ = []
        for index in self.restailer()[0]:
            self.pair_hour_time_.append(np.datetime_data(index))
            
        self.pair_minute_time_ = []
        for index in self.restailer()[1]:
            self.pair_minute_time_.append(np.datetime_data(index))
        
        self.break_hour_time_ = []
        for index in self.restailer()[2]:
            self.break_hour_time_.append(np.datetime_data(index))
        
        self.break_minute_time_ = []
        for index in self.restailer()[3]:
            self.break_minute_time_.append(np.datetime_data(index))
        
        return self.pair_hour_time_, \
        self.pair_minute_time_, \
        self.break_hour_time_, \
        self.break_minute_time_
        
        
    def translate_recyler(self):
        
        self.pair_time = []
        for e, i in enumerate(self.recycler()[0]):
            try:
                self.pair_time.append(np.array(1, self.restailer()[0][e]).astype('timedelta64[h]') + np.array(1, self.restailer()[1][e]).astype('timedelta64[m]'))
            except SystemError:
                self.pair_time.append(np.array(1, self.restailer()[0][e]).astype('timedelta64[m]'))
        
        self.break_time = []
        for e, i in enumerate(self.recycler()[2]):
            try:
                self.break_time.append(np.array(1, self.restailer()[2][e]).astype('timedelta64[h]') + np.array(1, self.restailer()[3][e]).astype('timedelta64[m]'))
            except SystemError:
                self.break_time.append(np.array(1, self.restailer()[2][e]).astype('timedelta64[m]'))
                
        return self.pair_time, self.break_time
    
    def prr(self):
        
        return self.generater_vars()



class What(TimeTimeTime):
    
    def give_information(self):
        
        self.won = np.array(1, np.dtype(f'timedelta64[{10}m]')).astype('timedelta64[m]')
        self.own = np.array(1, np.dtype(f'timedelta64[{50}m]')).astype('timedelta64[m]')
        for i, e in enumerate(self.translate_recyler()[0]):
            for j in range(len(self.translate_recyler()[0])-1):
                
                if self.translate_recyler()[0][i] <= self.generater_vars() <= self.translate_recyler()[1][i]:
                    return f'–î–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã: {str(self.translate_recyler()[1][i] - self.generater_vars())}'
                
                elif (self.translate_recyler()[0][j+1] - self.translate_recyler()[1][i] == self.won and \
                self.translate_recyler()[1][i] <= self.generater_vars() <= self.translate_recyler()[0][j+1]) or \
                (self.translate_recyler()[0][j+1] - self.translate_recyler()[1][i] == self.own and \
                self.translate_recyler()[1][i] <= self.generater_vars() <= self.translate_recyler()[0][j+1]):
                    return f'–î–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã: {str(self.translate_recyler()[0][j+1] - self.generater_vars())}'
        else:
            return '–ü–∞—Ä –Ω–µ—Ç!'


h = What()
h.give_information()